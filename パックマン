<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>パックマンゲーム</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            background: #000;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            font-family: 'Arial', sans-serif;
            color: white;
            user-select: none;
            -webkit-user-select: none;
            -webkit-touch-callout: none;
        }
        
        #gameContainer {
            position: relative;
            border: 3px solid #0000ff;
            border-radius: 10px;
            background: #000;
            max-width: 100vw;
            max-height: 70vh;
        }
        
        #gameCanvas {
            display: block;
            background: #000;
            max-width: 100%;
            height: auto;
        }
        
        #ui {
            position: absolute;
            top: -50px;
            left: 0;
            right: 0;
            text-align: center;
            font-size: 20px;
            font-weight: bold;
            color: #ffff00;
        }
        
        #gameOver {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            font-size: 24px;
            z-index: 20;
            display: none;
            background: rgba(0, 0, 255, 0.8);
            padding: 30px;
            border-radius: 15px;
            border: 3px solid #ffff00;
        }
        
        button {
            background: #ffff00;
            color: #000;
            border: none;
            padding: 10px 20px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            margin-top: 15px;
            border-radius: 5px;
        }
        
        button:hover {
            background: #ffdd00;
        }
        
        #instructions {
            position: absolute;
            bottom: -40px;
            left: 0;
            right: 0;
            text-align: center;
            font-size: 14px;
            color: #888;
        }
        
        /* モバイル用コントローラー */
        #mobileControls {
            display: none;
            margin-top: 20px;
            position: relative;
            width: 200px;
            height: 200px;
        }
        
        .control-btn {
            position: absolute;
            width: 60px;
            height: 60px;
            background: rgba(255, 255, 0, 0.8);
            border: 3px solid #ffff00;
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            font-weight: bold;
            color: #000;
            cursor: pointer;
            user-select: none;
            -webkit-user-select: none;
            touch-action: manipulation;
        }
        
        .control-btn:active {
            background: rgba(255, 255, 0, 1);
            transform: scale(0.95);
        }
        
        #upBtn {
            top: 0;
            left: 50%;
            transform: translateX(-50%);
        }
        
        #downBtn {
            bottom: 0;
            left: 50%;
            transform: translateX(-50%);
        }
        
        #leftBtn {
            left: 0;
            top: 50%;
            transform: translateY(-50%);
        }
        
        #rightBtn {
            right: 0;
            top: 50%;
            transform: translateY(-50%);
        }
        
        /* モバイル検出 */
        @media (max-width: 768px) {
            #mobileControls {
                display: block;
            }
            
            #instructions {
                bottom: -80px;
            }
            
            #gameCanvas {
                max-width: 95vw;
                max-height: 60vh;
            }
        }
        
        #victory {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            font-size: 24px;
            z-index: 20;
            display: none;
            background: rgba(0, 255, 0, 0.8);
            padding: 30px;
            border-radius: 15px;
            border: 3px solid #ffff00;
            color: #000;
        }
    </style>
</head>
<body>
    <div id="gameContainer">
        <div id="ui">
            スコア: <span id="score">0</span> | ライフ: <span id="lives">3</span>
        </div>
        <canvas id="gameCanvas" width="600" height="660"></canvas>
        <div id="gameOver">
            <h2>ゲームオーバー！</h2>
            <p>最終スコア: <span id="finalScore">0</span></p>
            <button onclick="restartGame()">再スタート</button>
        </div>
        <div id="victory">
            <h2>おめでとう！</h2>
            <p>全てのドットを集めました！</p>
            <p>最終スコア: <span id="victoryScore">0</span></p>
            <button onclick="restartGame()">もう一度プレイ</button>
        </div>
        <div id="instructions">
            矢印キー: 移動 | 全てのドットを集めよう！
        </div>
        
        <!-- モバイル用コントローラー -->
        <div id="mobileControls">
            <div class="control-btn" id="upBtn">↑</div>
            <div class="control-btn" id="downBtn">↓</div>
            <div class="control-btn" id="leftBtn">←</div>
            <div class="control-btn" id="rightBtn">→</div>
        </div>
    </div>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        
        const CELL_SIZE = 20;
        const COLS = 30;
        const ROWS = 33;
        
        // ゲーム状態
        let game = {
            score: 0,
            lives: 3,
            isRunning: true,
            keys: {},
            dotsCollected: 0,
            totalDots: 0
        };
        
        // 迷路の設計（1=壁, 0=道, 2=ドット, 3=パワーペレット）
        const maze = [
            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
            [1,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,1],
            [1,3,1,1,1,1,2,1,1,1,1,1,2,2,1,1,2,2,1,1,1,1,1,2,1,1,1,1,3,1],
            [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1],
            [1,2,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,2,1],
            [1,2,2,2,2,2,2,1,1,2,2,2,2,1,1,1,1,2,2,2,2,1,1,2,2,2,2,2,2,1],
            [1,1,1,1,1,1,2,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,2,1,1,1,1,1,1],
            [0,0,0,0,0,1,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,1,0,0,0,0,0],
            [1,1,1,1,1,1,2,1,1,0,1,1,0,0,0,0,0,0,1,1,0,1,1,2,1,1,1,1,1,1],
            [0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0],
            [1,1,1,1,1,1,2,1,1,0,1,0,0,0,0,0,0,0,0,1,0,1,1,2,1,1,1,1,1,1],
            [0,0,0,0,0,1,2,1,1,0,1,1,1,1,0,0,1,1,1,1,0,1,1,2,1,0,0,0,0,0],
            [1,1,1,1,1,1,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,1,1,1,1,1,1],
            [1,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,1],
            [1,2,1,1,1,1,2,1,1,1,1,1,2,2,1,1,2,2,1,1,1,1,1,2,1,1,1,1,2,1],
            [1,3,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,3,1],
            [1,1,1,2,1,1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,2,1,1,2,1,1,2,1,1,1],
            [1,2,2,2,2,2,2,1,1,2,2,2,2,1,1,1,1,2,2,2,2,1,1,2,2,2,2,2,2,1],
            [1,2,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,2,1],
            [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1],
            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
        ];
        
        // パックマン
        let pacman = {
            x: 14,
            y: 15,
            direction: 0, // 0=right, 1=down, 2=left, 3=up
            nextDirection: 0,
            mouthOpen: true,
            animationTimer: 0
        };
        
        // ゴースト
        let ghosts = [
            { x: 14, y: 9, direction: 0, color: '#ff0000', mode: 'normal' },
            { x: 15, y: 9, direction: 2, color: '#ffb8ff', mode: 'normal' },
            { x: 13, y: 9, direction: 1, color: '#00ffff', mode: 'normal' },
            { x: 16, y: 9, direction: 3, color: '#ffb852', mode: 'normal' }
        ];
        
        let powerPelletTimer = 0;
        let scaredTimer = 0;
        
        // キーイベント
        document.addEventListener('keydown', (e) => {
            game.keys[e.code] = true;
            e.preventDefault();
        });
        
        document.addEventListener('keyup', (e) => {
            game.keys[e.code] = false;
            e.preventDefault();
        });
        
        // モバイル用タッチイベント
        function setupMobileControls() {
            const buttons = {
                'upBtn': 'ArrowUp',
                'downBtn': 'ArrowDown',
                'leftBtn': 'ArrowLeft',
                'rightBtn': 'ArrowRight'
            };
            
            Object.keys(buttons).forEach(btnId => {
                const btn = document.getElementById(btnId);
                const keyCode = buttons[btnId];
                
                // タッチ開始
                btn.addEventListener('touchstart', (e) => {
                    e.preventDefault();
                    game.keys[keyCode] = true;
                    btn.style.background = 'rgba(255, 255, 0, 1)';
                });
                
                // タッチ終了
                btn.addEventListener('touchend', (e) => {
                    e.preventDefault();
                    game.keys[keyCode] = false;
                    btn.style.background = 'rgba(255, 255, 0, 0.8)';
                });
                
                // タッチがボタンから離れた場合
                btn.addEventListener('touchcancel', (e) => {
                    e.preventDefault();
                    game.keys[keyCode] = false;
                    btn.style.background = 'rgba(255, 255, 0, 0.8)';
                });
                
                // マウスイベント（デスクトップでのテスト用）
                btn.addEventListener('mousedown', (e) => {
                    e.preventDefault();
                    game.keys[keyCode] = true;
                    btn.style.background = 'rgba(255, 255, 0, 1)';
                });
                
                btn.addEventListener('mouseup', (e) => {
                    e.preventDefault();
                    game.keys[keyCode] = false;
                    btn.style.background = 'rgba(255, 255, 0, 0.8)';
                });
                
                btn.addEventListener('mouseleave', (e) => {
                    game.keys[keyCode] = false;
                    btn.style.background = 'rgba(255, 255, 0, 0.8)';
                });
            });
        }
        
        // 初期化
        function initGame() {
            game.totalDots = 0;
            game.dotsCollected = 0;
            
            // ドットの数を数える
            for (let row = 0; row < maze.length; row++) {
                for (let col = 0; col < maze[row].length; col++) {
                    if (maze[row][col] === 2 || maze[row][col] === 3) {
                        game.totalDots++;
                    }
                }
            }
        }
        
        // 迷路の描画
        function drawMaze() {
            for (let row = 0; row < maze.length; row++) {
                for (let col = 0; col < maze[row].length; col++) {
                    const x = col * CELL_SIZE;
                    const y = row * CELL_SIZE;
                    
                    switch(maze[row][col]) {
                        case 1: // 壁
                            ctx.fillStyle = '#0000ff';
                            ctx.fillRect(x, y, CELL_SIZE, CELL_SIZE);
                            break;
                        case 2: // 通常のドット
                            ctx.fillStyle = '#ffff00';
                            ctx.beginPath();
                            ctx.arc(x + CELL_SIZE/2, y + CELL_SIZE/2, 2, 0, Math.PI * 2);
                            ctx.fill();
                            break;
                        case 3: // パワーペレット
                            ctx.fillStyle = '#ffff00';
                            ctx.beginPath();
                            const size = (Math.sin(powerPelletTimer * 0.3) + 1) * 3 + 4;
                            ctx.arc(x + CELL_SIZE/2, y + CELL_SIZE/2, size, 0, Math.PI * 2);
                            ctx.fill();
                            break;
                    }
                }
            }
        }
        
        // パックマンの描画
        function drawPacman() {
            const centerX = pacman.x * CELL_SIZE + CELL_SIZE / 2;
            const centerY = pacman.y * CELL_SIZE + CELL_SIZE / 2;
            const radius = CELL_SIZE / 2 - 2;
            
            ctx.fillStyle = '#ffff00';
            ctx.beginPath();
            
            if (pacman.mouthOpen) {
                const mouthAngle = 0.8;
                const startAngle = pacman.direction * Math.PI / 2 - mouthAngle / 2;
                const endAngle = pacman.direction * Math.PI / 2 + mouthAngle / 2;
                
                ctx.arc(centerX, centerY, radius, startAngle, endAngle);
                ctx.lineTo(centerX, centerY);
            } else {
                ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);
            }
            
            ctx.fill();
        }
        
        // ゴーストの描画
        function drawGhosts() {
            ghosts.forEach(ghost => {
                const centerX = ghost.x * CELL_SIZE + CELL_SIZE / 2;
                const centerY = ghost.y * CELL_SIZE + CELL_SIZE / 2;
                const radius = CELL_SIZE / 2 - 2;
                
                if (ghost.mode === 'scared') {
                    ctx.fillStyle = scaredTimer > 120 && scaredTimer % 20 < 10 ? '#ffffff' : '#0000ff';
                } else {
                    ctx.fillStyle = ghost.color;
                }
                
                // ゴーストの体
                ctx.beginPath();
                ctx.arc(centerX, centerY - 2, radius, Math.PI, 0);
                ctx.lineTo(centerX + radius, centerY + radius);
                ctx.lineTo(centerX + radius - 4, centerY + radius - 4);
                ctx.lineTo(centerX, centerY + radius);
                ctx.lineTo(centerX - radius + 4, centerY + radius - 4);
                ctx.lineTo(centerX - radius, centerY + radius);
                ctx.closePath();
                ctx.fill();
                
                // 目
                ctx.fillStyle = '#ffffff';
                ctx.fillRect(centerX - 6, centerY - 6, 4, 6);
                ctx.fillRect(centerX + 2, centerY - 6, 4, 6);
                
                if (ghost.mode !== 'scared') {
                    ctx.fillStyle = '#000000';
                    ctx.fillRect(centerX - 5, centerY - 4, 2, 3);
                    ctx.fillRect(centerX + 3, centerY - 4, 2, 3);
                }
            });
        }
        
        // 移動可能かチェック
        function canMoveTo(x, y) {
            if (x < 0 || x >= COLS || y < 0 || y >= maze.length) {
                return true; // トンネル効果
            }
            return maze[y] && maze[y][x] !== 1;
        }
        
        // パックマンの更新
        function updatePacman() {
            // 移動タイマーを追加して速度を制御
            if (!pacman.moveTimer) pacman.moveTimer = 0;
            pacman.moveTimer++;
            
            // 6フレームに1回だけ移動
            if (pacman.moveTimer % 6 !== 0) return;
            
            // キー入力に基づいて方向を決定
            let newDirection = pacman.direction;
            
            if (game.keys['ArrowUp']) {
                newDirection = 3;
            } else if (game.keys['ArrowDown']) {
                newDirection = 1;
            } else if (game.keys['ArrowLeft']) {
                newDirection = 2;
            } else if (game.keys['ArrowRight']) {
                newDirection = 0;
            } else {
                // キーが押されていない場合は移動しない
                return;
            }
            
            // 方向転換の試行
            const directions = [[1, 0], [0, 1], [-1, 0], [0, -1]];
            const [nextDx, nextDy] = directions[newDirection];
            const nextX = pacman.x + nextDx;
            const nextY = pacman.y + nextDy;
            
            if (canMoveTo(nextX, nextY)) {
                pacman.direction = newDirection;
                pacman.x = nextX;
                pacman.y = nextY;
                
                // トンネル効果
                if (pacman.x < 0) pacman.x = COLS - 1;
                if (pacman.x >= COLS) pacman.x = 0;
            } else if (pacman.direction === newDirection) {
                // 同じ方向で移動できない場合は止まる
                return;
            } else {
                // 新しい方向に移動できない場合、現在の方向で移動を試行
                const [dx, dy] = directions[pacman.direction];
                const currentX = pacman.x + dx;
                const currentY = pacman.y + dy;
                
                if (canMoveTo(currentX, currentY)) {
                    pacman.x = currentX;
                    pacman.y = currentY;
                    
                    // トンネル効果
                    if (pacman.x < 0) pacman.x = COLS - 1;
                    if (pacman.x >= COLS) pacman.x = 0;
                }
            }
            
            // アニメーション
            pacman.animationTimer++;
            if (pacman.animationTimer % 10 === 0) {
                pacman.mouthOpen = !pacman.mouthOpen;
            }
            
            // ドット収集
            if (maze[pacman.y] && maze[pacman.y][pacman.x] === 2) {
                maze[pacman.y][pacman.x] = 0;
                game.score += 10;
                game.dotsCollected++;
                updateUI();
            }
            
            // パワーペレット収集
            if (maze[pacman.y] && maze[pacman.y][pacman.x] === 3) {
                maze[pacman.y][pacman.x] = 0;
                game.score += 50;
                game.dotsCollected++;
                scaredTimer = 200;
                ghosts.forEach(ghost => ghost.mode = 'scared');
                updateUI();
            }
        }
        
        // ゴーストの更新
        function updateGhosts() {
            if (scaredTimer > 0) {
                scaredTimer--;
                if (scaredTimer === 0) {
                    ghosts.forEach(ghost => ghost.mode = 'normal');
                }
            }
            
            ghosts.forEach(ghost => {
                // ゴーストの移動タイマーを追加
                if (!ghost.moveTimer) ghost.moveTimer = 0;
                ghost.moveTimer++;
                
                // 12フレームに1回だけ移動（パックマンより少し遅く）
                if (ghost.moveTimer % 12 !== 0) return;
                
                // ランダムな方向選択（簡単なAI）
                if (Math.random() < 0.1) {
                    ghost.direction = Math.floor(Math.random() * 4);
                }
                
                const directions = [[1, 0], [0, 1], [-1, 0], [0, -1]];
                let moved = false;
                let attempts = 0;
                
                while (!moved && attempts < 4) {
                    const [dx, dy] = directions[ghost.direction];
                    const newX = ghost.x + dx;
                    const newY = ghost.y + dy;
                    
                    if (canMoveTo(newX, newY)) {
                        ghost.x = newX;
                        ghost.y = newY;
                        
                        // トンネル効果
                        if (ghost.x < 0) ghost.x = COLS - 1;
                        if (ghost.x >= COLS) ghost.x = 0;
                        
                        moved = true;
                    } else {
                        ghost.direction = Math.floor(Math.random() * 4);
                        attempts++;
                    }
                }
            });
        }
        
        // 衝突チェック
        function checkCollisions() {
            ghosts.forEach(ghost => {
                if (ghost.x === pacman.x && ghost.y === pacman.y) {
                    if (ghost.mode === 'scared') {
                        // ゴーストを食べた
                        game.score += 200;
                        ghost.mode = 'normal';
                        ghost.x = 14 + Math.floor(Math.random() * 3) - 1;
                        ghost.y = 9;
                        updateUI();
                    } else {
                        // パックマンがやられた
                        game.lives--;
                        updateUI();
                        
                        if (game.lives <= 0) {
                            gameOver();
                        } else {
                            // リセット位置
                            pacman.x = 14;
                            pacman.y = 15;
                            pacman.direction = 0;
                        }
                    }
                }
            });
        }
        
        // UI更新
        function updateUI() {
            document.getElementById('score').textContent = game.score;
            document.getElementById('lives').textContent = game.lives;
            
            // 勝利条件チェック
            if (game.dotsCollected >= game.totalDots) {
                victory();
            }
        }
        
        // ゲームオーバー
        function gameOver() {
            game.isRunning = false;
            document.getElementById('finalScore').textContent = game.score;
            document.getElementById('gameOver').style.display = 'block';
        }
        
        // 勝利
        function victory() {
            game.isRunning = false;
            document.getElementById('victoryScore').textContent = game.score;
            document.getElementById('victory').style.display = 'block';
        }
        
        // ゲーム再スタート
        function restartGame() {
            // 迷路をリセット
            for (let row = 0; row < maze.length; row++) {
                for (let col = 0; col < maze[row].length; col++) {
                    if (maze[row][col] === 0) {
                        // 元々ドットがあった場所を復元（簡易版）
                        if ((row === 1 || row === 2 || row === 3 || row === 4 || row === 5 || 
                             row === 13 || row === 14 || row === 15 || row === 16 || row === 17 || 
                             row === 18 || row === 19) && col > 0 && col < 29) {
                            if (!(row === 2 && (col === 2 || col === 27)) && 
                                !(row === 15 && (col === 2 || col === 27))) {
                                maze[row][col] = 2;
                            }
                        }
                    }
                }
            }
            
            // パワーペレットを復元
            maze[2][1] = 3;
            maze[2][28] = 3;
            maze[15][1] = 3;
            maze[15][28] = 3;
            
            game = {
                score: 0,
                lives: 3,
                isRunning: true,
                keys: {},
                dotsCollected: 0,
                totalDots: 0
            };
            
            pacman = {
                x: 14,
                y: 15,
                direction: 0,
                nextDirection: 0,
                mouthOpen: true,
                animationTimer: 0,
                moveTimer: 0
            };
            
            ghosts = [
                { x: 14, y: 9, direction: 0, color: '#ff0000', mode: 'normal', moveTimer: 0 },
                { x: 15, y: 9, direction: 2, color: '#ffb8ff', mode: 'normal', moveTimer: 0 },
                { x: 13, y: 9, direction: 1, color: '#00ffff', mode: 'normal', moveTimer: 0 },
                { x: 16, y: 9, direction: 3, color: '#ffb852', mode: 'normal', moveTimer: 0 }
            ];
            
            scaredTimer = 0;
            powerPelletTimer = 0;
            
            document.getElementById('gameOver').style.display = 'none';
            document.getElementById('victory').style.display = 'none';
            
            initGame();
            updateUI();
        }
        
        // ゲームループ
        function gameLoop() {
            if (game.isRunning) {
                // 画面クリア
                ctx.fillStyle = '#000';
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                
                // 描画
                drawMaze();
                drawPacman();
                drawGhosts();
                
                // 更新
                updatePacman();
                updateGhosts();
                checkCollisions();
                
                powerPelletTimer++;
            }
            
            requestAnimationFrame(gameLoop);
        }
        
        // ゲーム開始
        initGame();
        updateUI();
        setupMobileControls();
        gameLoop();
    </script>
</body>
</html>
